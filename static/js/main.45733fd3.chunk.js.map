{"version":3,"sources":["store/reducers/auth/types.ts","hooks/useTypedSelector.ts","utils/date.ts","components/EventCalendar.tsx","utils/rules.ts","components/EventForm.tsx","api/UserSrvice.ts","store/reducers/auth/action-creators.ts","store/reducers/event/types.ts","store/reducers/event/action-creators.ts","routes/index.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginFrom.tsx","pages/Login.tsx","pages/Event.tsx","components/AppRouter.tsx","components/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/event/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","useTypedSelector","useSelector","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EventCalendar","props","dateCellRender","value","formatedDate","toDate","currentDayEvents","events","filter","ev","map","index","description","rules","message","required","validator","_","isSameOrAfter","moment","Promise","resolve","reject","Error","EventForm","useState","author","guest","event","setEvent","user","state","authReducer","onFinish","submit","username","Item","label","name","onChange","e","target","selectDate","guests","Option","justify","type","htmlType","UserService","axios","get","EventActionEnum","AuthActionCreators","setUser","SET_USER","payload","setAuth","auth","SET_AUTH","setIsLoading","SET_IS_LOADING","setError","SER_ERROR","login","password","dispatch","a","setTimeout","getUsers","response","mockUser","data","find","localStorage","setItem","logout","removeItem","RouteNmaes","EventActionCreators","setGuests","SET_GUESTS","setEvents","SET_EVENTS","fetchGuests","console","log","createEvent","getItem","json","JSON","parse","push","stringify","fetchEvents","currentUserEvents","allActionCreators","useActions","useDispatch","bindActionCreators","LoginFrom","error","isLoading","setUsername","setPassword","style","color","Password","wrapperCol","offset","span","loading","publicRoutes","path","LOGIN","component","align","className","exect","privateRoutes","EVENT","modalVisible","setModalVisible","eventReducer","useEffect","onClick","title","visible","footer","onCancel","AppRouter","isAuth","route","exact","to","Navbar","router","useHistory","Header","theme","mode","selectable","App","Content","initialState","action","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45733fd3.chunk.js","sourcesContent":["import { IUser } from \"../../../models/IUser\";\n\nexport interface AuthState {\n    isAuth: boolean;\n    user: IUser;\n    isLoading: boolean;\n    error: string;\n}\n\nexport enum AuthActionEnum {\n    SET_AUTH = \"SET_AUTH\",\n    SER_ERROR = \"SER_ERROR\",\n    SET_USER = \"SET_USER\",\n    SET_IS_LOADING = \"SET_IS_LOADING\",\n}\n\nexport interface SetAuthAction {\n    type: AuthActionEnum.SET_AUTH;\n    payload: boolean;\n}\n\nexport interface SetErrorAction {\n    type: AuthActionEnum.SER_ERROR;\n    payload: string;\n}\n\nexport interface SetUserAction {\n    type: AuthActionEnum.SET_USER;\n    payload: IUser;\n}\n\nexport interface SetIsLoadingAction {\n    type: AuthActionEnum.SET_IS_LOADING;\n    payload: boolean;\n}\n\nexport type AuthAction = SetAuthAction | SetErrorAction | SetIsLoadingAction | SetUserAction","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import { Moment } from \"moment\";\n\nexport const formatDate = (date: Date): string => {\n    const year = date.getFullYear()\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\n    const day = date.getDate() < 10 ? `0${date.getDate() }` : date.getDate()\n\n    return `${year}.${month}.${day}`\n}","import { Calendar } from 'antd'\nimport { Moment } from 'moment';\nimport React, {FC, PropsWithChildren} from 'react'\nimport { IEvent } from '../models/IEvent';\nimport { formatDate } from '../utils/date';\n\ninterface EventCalnedarProps {\n    events: IEvent[];\n}\n\nconst EventCalendar: FC<EventCalnedarProps> = (props) => {\n\n    function dateCellRender(value: Moment) {\n       const formatedDate = formatDate(value.toDate())\n       const currentDayEvents = props.events.filter(ev => ev.date === formatedDate)\n        return (\n          <div>\n              {currentDayEvents.map((ev, index) => \n                    <div key={index}>{ev.description}</div>\n                )}\n          </div>\n        );\n      }\n    return (\n        <Calendar dateCellRender={dateCellRender}/>\n        \n    )\n}\n\nexport default EventCalendar;\n","import moment, { Moment } from \"moment\";\n\nexport const rules = {\n    required: (message: string = 'Required field') => ({\n        required: true, \n        message: message\n    }),\n    isDateAfter: (message: string) => () => ({\n        validator(_:any, value: Moment) {\n            if (value.isSameOrAfter(moment())) {\n                return Promise.resolve()\n            }\n            return Promise.reject(new Error(message))\n        }\n    })\n}","import { DatePicker, Form, Input, Button, Row, Select } from 'antd'\nimport { rules } from '../utils/rules'\nimport React, { FC, useState} from 'react'\nimport { IUser } from '../models/IUser'\nimport { IEvent } from '../models/IEvent'\nimport { Moment } from 'moment'\nimport { formatDate } from '../utils/date'\nimport { useTypedSelector } from '../hooks/useTypedSelector'\n\ninterface EventFormProps {\n    guests: IUser[]\n    submit: (event: IEvent) => void\n}\n\nexport const EventForm: FC<EventFormProps> = (props) => {\n    const [event, setEvent] = useState<IEvent>({\n        author: '',\n        date: '',\n        description: '',\n        guest: '',\n\n    } as IEvent)\n    const {user} = useTypedSelector(state => state.authReducer)\n\n    const selectDate = (date: Moment | null) => {\n        if (date) {\n            setEvent({...event, date: formatDate(date?.toDate())})\n        }\n    }\n    const submitForm = () => {\n        props.submit({...event, author: user.username})\n    }\n\n    return (\n        <Form onFinish={submitForm}>\n            <Form.Item\n                label=\"Event name\"\n                name=\"description\"\n                rules={[rules.required()]}\n            >\n                <Input value={event.description} onChange={e => setEvent({...event, description: e.target.value})}/>\n            </Form.Item>\n            <Form.Item\n                label=\"Event date\"\n                name=\"date\"\n                rules={[rules.required(), rules.isDateAfter('Date is less then current date.')]}\n            >\n                <DatePicker onChange={(date) => selectDate(date)}/>\n            </Form.Item>\n            <Form.Item\n                label=\"Event guests\"\n                name=\"guests\"\n                rules={[rules.required()]}\n            >\n                <Select onChange={(guest: string) => setEvent({...event, guest})}>\n                    {props.guests.map(guest =>\n                        <Select.Option key={guest.username} value={guest.username}>\n                            {guest.username}\n                        </Select.Option>\n                    )}\n                </Select>\n            </Form.Item>\n            <Row justify=\"end\">\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Row>\n        </Form>\n    )\n}\n","import axios, { AxiosResponse } from \"axios\";\nimport { IUser } from \"../models/IUser\";\n\nexport default class UserService {\n     static async getUsers(): Promise<AxiosResponse<IUser[]>> {\n        return axios.get<IUser[]>('./users.json')\n    }\n}","import { AppDispatch } from \"../..\";\nimport UserService from \"../../../api/UserSrvice\";\nimport { IUser } from \"../../../models/IUser\";\nimport { AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction } from \"./types\";\n\nexport const AuthActionCreators = {\n    setUser: (user: IUser): SetUserAction => ({ type: AuthActionEnum.SET_USER, payload: user }),\n    setAuth: (auth: boolean): SetAuthAction => ({ type: AuthActionEnum.SET_AUTH, payload: auth }),\n    setIsLoading: (payload: boolean): SetIsLoadingAction => ({ type: AuthActionEnum.SET_IS_LOADING, payload }),\n    setError: (payload: string): SetErrorAction => ({ type: AuthActionEnum.SER_ERROR, payload }),\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\n        try {\n            dispatch(AuthActionCreators.setIsLoading(true));\n            setTimeout(async() => {\n                const response = await UserService.getUsers()\n                const mockUser = response.data.find(user => user.username === username && user.password === password)\n                if (mockUser) {\n                    localStorage.setItem('auth', 'true');\n                    localStorage.setItem('username', username);\n                    dispatch(AuthActionCreators.setUser(mockUser));\n                    dispatch(AuthActionCreators.setAuth(true));\n                } else {\n                    dispatch(AuthActionCreators.setError('Wrong password or login'));\n                }\n                dispatch(AuthActionCreators.setIsLoading(false));\n            },1000)\n        } catch (e) {\n            dispatch(AuthActionCreators.setError('Oops! something went wrong'));\n        }\n    },\n    logout: () => async (dispatch: AppDispatch) => {\n        localStorage.removeItem('auth')\n        localStorage.removeItem('username')\n        dispatch(AuthActionCreators.setUser({} as IUser))\n        dispatch(AuthActionCreators.setAuth(false))\n    }\n}","import { IEvent } from \"../../../models/IEvent\";\nimport { IUser } from \"../../../models/IUser\";\n\nexport interface EventState {\n    guests: IUser[];\n    events: IEvent[];\n}\n\nexport enum EventActionEnum {\n    SET_GUESTS = \"SET_GUESTS\",\n    SET_EVENTS = \"SET_EVENTS\",\n}\n\nexport interface SetGuestsAction {\n    type: EventActionEnum.SET_GUESTS;\n    payload: IUser[];\n}\n\nexport interface SetEventsAction {\n    type: EventActionEnum.SET_EVENTS;\n    payload: IEvent[];\n}\n\nexport type EventAction = SetGuestsAction | SetEventsAction","import { IEvent } from \"../../../models/IEvent\";\nimport { IUser } from \"../../../models/IUser\";\nimport { EventActionEnum, SetEventsAction, SetGuestsAction } from \"./types\";\nimport { AppDispatch } from \"../..\";\nimport UserService from \"../../../api/UserSrvice\";\n\nexport const EventActionCreators = {\n    setGuests: (payload: IUser[]): SetGuestsAction => ({type: EventActionEnum.SET_GUESTS, payload}),\n    setEvents: (payload: IEvent[]): SetEventsAction => ({type: EventActionEnum.SET_EVENTS, payload}),\n    fetchGuests: () => async (dispatch: AppDispatch) => {\n        try {\n            const response = await UserService.getUsers()\n            dispatch(EventActionCreators.setGuests(response.data))\n        } catch (e) {\n            console.log(e)\n        }\n    },\n    createEvent: (event: IEvent) => async (dispatch: AppDispatch) => {\n        try {\n            const events = localStorage.getItem('events') || '[]'\n            const json = JSON.parse(events) as IEvent[];\n            json.push(event)\n            dispatch(EventActionCreators.setEvents(json))\n            localStorage.setItem('events', JSON.stringify(json))\n        } catch (e) {\n            console.log(e)\n        }\n    },\n    fetchEvents: (username: string) => async (dispatch: AppDispatch) => {\n        try {\n            const events = localStorage.getItem('events') || '[]'\n            const json = JSON.parse(events) as IEvent[];\n            const currentUserEvents = json.filter(ev => ev.author === username || ev.guest === username)\n            dispatch(EventActionCreators.setEvents(currentUserEvents))\n        } catch (e) {\n            console.log(e)\n        }\n    },\n}","import { Event } from \"../pages/Event\"\nimport { Login } from \"../pages/Login\"\n\nexport interface IRouter {\n    path: string;\n    component: React.ComponentType;\n    exect?: boolean\n}\n\nexport enum RouteNmaes {\n    LOGIN = '/login',\n    EVENT = '/'\n}\n\nexport const publicRoutes: IRouter[] = [\n    {path: RouteNmaes.LOGIN, component: Login, exect: true}\n]\nexport const privateRoutes: IRouter[] = [\n    {path: RouteNmaes.EVENT, component: Event, exect: true}\n]","import { AuthActionCreators } from \"./auth/action-creators\";\nimport { EventActionCreators } from \"./event/action-creators\";\n\nexport const allActionCreators = {\n    ...AuthActionCreators,\n    ...EventActionCreators,\n}","import { useDispatch } from \"react-redux\"\nimport { bindActionCreators } from \"redux\"\nimport { AppDispatch } from \"../store\"\nimport { allActionCreators } from \"../store/reducers/action-creators\"\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(allActionCreators, dispatch)\n}","import { Form, Input, Button} from 'antd'\nimport React, { FC, useState } from 'react'\nimport { rules } from '../utils/rules'\nimport { useDispatch } from 'react-redux'\nimport { AuthActionCreators } from '../store/reducers/auth/action-creators'\nimport { useTypedSelector } from '../hooks/useTypedSelector'\nimport { useActions } from '../hooks/useActions'\n\nexport const LoginFrom: FC = () => {\n    const {error, isLoading} = useTypedSelector(state => state.authReducer)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const {login} = useActions()\n    const submit = () => {\n        login(username, password)\n    }\n    return (\n        <Form\n            onFinish={submit}\n        >\n           {error && <div style={{color: 'red'}}>\n                {error}\n            </div>}\n            <Form.Item\n                label=\"Username\"\n                name=\"username\"\n                rules={[rules.required('Please input your username!')]}\n            >\n                <Input value={password} onChange={e => setUsername(e.target.value)}/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Password\"\n                name=\"password\"\n                rules={[rules.required('Please input your password!')]}\n            >\n                <Input.Password value={username} onChange={e => setPassword(e.target.value)}/>\n            </Form.Item>\n\n            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                    Submit\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n","import { Row, Layout, Card } from 'antd'\nimport React, { FC } from 'react'\nimport { LoginFrom } from '../components/LoginFrom'\n\nexport const Login: FC = () => {\n    return (\n        <Layout>\n            <Row justify=\"center\" align=\"middle\" className=\"h100\">\n                <Card>\n                    <LoginFrom />\n                </Card>\n            </Row>\n        </Layout>\n    )\n}\n","import {Button, Layout, Row, Modal} from 'antd'\nimport React, { FC, useState, useEffect} from 'react'\nimport EventCalendar from '../components/EventCalendar'\nimport { EventForm } from '../components/EventForm'\nimport { useActions } from '../hooks/useActions'\nimport { useTypedSelector } from '../hooks/useTypedSelector'\nimport { IEvent } from '../models/IEvent'\n\nexport const Event: FC = () => {\n    const [modalVisible, setModalVisible] = useState(false)\n    const {fetchGuests, createEvent, fetchEvents} = useActions()\n    const  {guests, events} = useTypedSelector(state => state.eventReducer)\n    const {user} = useTypedSelector(state => state.authReducer)\n    useEffect(() => {\n        fetchGuests();\n        fetchEvents(user.username);\n    }, [])\n\n    const addNewEven = (event: IEvent) => {\n        setModalVisible(false);\n        createEvent(event);\n    }\n\n    return (\n        <Layout>\n        \n            <EventCalendar events={events}/>\n            <Row justify=\"center\">\n                <Button onClick={() => setModalVisible(true)}>Add Event</Button>\n            </Row>\n            <Modal title=\"Add Event\" visible={modalVisible} footer={null} onCancel={() => setModalVisible(false)}>\n                <EventForm guests={guests} submit={addNewEven}/>\n            </Modal>\n        </Layout>\n    )\n}\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router'\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { privateRoutes, publicRoutes, RouteNmaes } from '../routes';\n\nexport const AppRouter = () => {\n    const {isAuth} = useTypedSelector(state => state.authReducer)\n    return (\n        isAuth\n            ?\n            <Switch>\n                {privateRoutes.map(route =>\n                    <Route\n                        path={route.path}\n                        exact={route.exect}\n                        component={route.component}\n                        key={route.path} />\n                )}\n                <Redirect to={RouteNmaes.EVENT}/>\n            </Switch>\n            :\n            <Switch>\n                {publicRoutes.map(route =>\n                    <Route\n                        path={route.path}\n                        exact={route.exect}\n                        component={route.component}\n                        key={route.path} />\n                )}\n                <Redirect to={RouteNmaes.LOGIN}/>\n            </Switch>\n    )\n}\n","import React from 'react'\nimport { Layout, Menu, Row } from 'antd'\nimport { useHistory } from 'react-router'\nimport { RouteNmaes } from '../routes'\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { useDispatch } from 'react-redux';\nimport { AuthActionCreators } from '../store/reducers/auth/action-creators';\nimport { useActions } from '../hooks/useActions';\n\nexport const Navbar = () => {\n    const router = useHistory()\n    const {logout} = useActions()\n    const {isAuth, user} = useTypedSelector(state => state.authReducer)\n    return (\n        <Layout.Header>\n            <Row justify='end'>\n                {isAuth\n                    ?\n                    <>\n                        <div style={{ color: \"white\" }}>\n                            {user.username}\n                        </div>\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n                            <Menu.Item\n                                key={1}\n                                onClick={logout}\n                            >\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </>\n                    :\n                    <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n                        <Menu.Item\n                            key={1}\n                            onClick={() => router.push(RouteNmaes.LOGIN)}\n                        >\n                            Login\n                        </Menu.Item>\n                    </Menu>\n                }\n            </Row>\n\n        </Layout.Header>\n    )\n}\n","import React, { FC, useEffect } from 'react';\nimport './App.css';\nimport { AppRouter } from './components/AppRouter';\nimport { Navbar } from './components/Navbar';\nimport { Layout } from 'antd';\nimport { useActions } from './hooks/useActions';\nimport { IUser } from './models/IUser';\n\nconst App: FC = () => {\n\n  const {setAuth, setUser} = useActions()\n  useEffect(() => {\n    if (localStorage.getItem('auth')) {\n      setUser({username: localStorage.getItem('username' || '')} as IUser)\n      setAuth(true)\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Navbar />\n        <Layout.Content>\n          <AppRouter />\n        </Layout.Content>\n      </Layout>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { IUser } from \"../../../models/IUser\"\nimport { AuthAction, AuthActionEnum, AuthState } from \"./types\"\n\nconst initialState: AuthState = {\n    isAuth: false,\n    error: '',\n    isLoading: false,\n    user: {} as IUser\n}\n\nexport default function authReducer(state = initialState, action: AuthAction): AuthState {\n\n    switch (action.type) {\n        case AuthActionEnum.SET_AUTH:\n            return { ...state, isAuth: action.payload, isLoading: false}\n        case AuthActionEnum.SER_ERROR:\n            return {...state, error: action.payload, isLoading: false}\n        case AuthActionEnum.SET_IS_LOADING:\n            return {...state, isLoading: action.payload}\n        case AuthActionEnum.SET_USER:\n            return {...state, user: action.payload}\n        default:\n            return state\n    }\n}","import { EventAction, EventActionEnum, EventState } from \"./types\";\n\nconst initialState: EventState = {\n    events: [],\n    guests: [],\n}\n\n\nexport default function EventReducer(state = initialState, action: EventAction): EventState {\n    switch (action.type) {\n        case EventActionEnum.SET_GUESTS:\n            return { ...state, guests: action.payload }\n        case EventActionEnum.SET_EVENTS:\n            return { ...state, events: action.payload }\n        default:\n            return state;\n    }\n\n}","import authReducer from \"./auth\";\nimport eventReducer from './event'\n\nexport default {\n    authReducer,\n    eventReducer\n}","import { createStore } from \"redux\"\nimport { applyMiddleware, combineReducers } from \"redux\"\nimport thunk from 'redux-thunk'\nimport reducers from \"./reducers\"\n\nconst rootReducer = combineReducers(reducers)\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}